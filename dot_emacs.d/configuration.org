* Packages
#+begin_src emacs-lisp
  ;; --- Emacs Package Management Preamble ---
  ;; (Must be the first thing in your config)

  (require 'package)

  ;; Initialize the package system
  (package-initialize)

  ;; Add the package archives you want to use (must be done before refresh)
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                           ("melpa" . "https://melpa.org/packages/")))

  ;; Ensure use-package is installed and loaded
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  ;; Set use-package to automatically install packages you reference
  (setq use-package-always-ensure t)
#+end_src

* UI
#+begin_src emacs-lisp
  
  ;;No startup message or splash screen
  (setq inhibit-startup-message t
        inhibit-splash-screen t)

  ;; Remove some visual clutter
  (menu-bar-mode 0)
  (tool-bar-mode 0)

  (use-package doom-themes
    :config
    (load-theme 'doom-gruvbox t)
    (doom-modeline-mode 1))

  (use-package which-key
    :config
    (which-key-mode 1))

  (display-time-mode 1)
  (setq display-time-24hr-format t
        display-time-format "%m-%d %a %H:%M"
        display-time-day-and-date t)
#+end_src

* File and backup settings
#+begin_src emacs-lisp
  (setq make-backup-files nil
        create-lockfiles nil
        delete-by-moving-to-trash t)
#+end_src

* Programming Helpers
#+begin_src emacs-lisp
  ;; Tabs and indentation
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)

  ;; Auto-completion
  (use-package company
    :ensure t
    :hook (after-init . global-company-mode)
    :custom
    (company-idle-delay 0)
    (company-minimum-prefix-length 2))
  
  ;; Parenthesis/braces
  (use-package paredit
    :hook
    (clojure-mode cider-repl-mode))

  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))

  (electric-pair-mode t)

  ;; HTML
  (use-package tagedit)

#+end_src


** Completion and Navigation helpers
#+begin_src emacs-lisp
;; The core completion framework
(use-package vertico
  :init
  (vertico-mode)
  (setq completion-style '(initials partial-completion basic)))

;; Powerful filtering
(use-package orderless
  :init
  (setq completion-styles '(orderless)))

;; Richer minibuffer display
(use-package marginalia
  :bind (:map minibuffer-local-map
          ("M-A" . marginalia-cycle))
  :init
  (marginalia-mode))

;; Replacement for counsel commands
(use-package consult
  :bind (("C-x b" . consult-buffer)
         ("C-s" . consult-line)
         ([remap isearch-forward] . consult-line)
         ([remap isearch-backward] . consult-line)
         ("C-x C-r" . consult-recent-file)
         ("C-c C-s" . consult-grep)
         ("C-c C-d" . consult-dir)))

;; Helpful functions
(use-package helpful
  :bind
  ([remap describe-function] . helpful-callable)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key] . helpful-key))
#+end_src


* Chezmoi integration
#+begin_src emacs-lisp
  (use-package chezmoi)
#+end_src
